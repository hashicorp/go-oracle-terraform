package lbaas

import (
	"testing"

	"github.com/hashicorp/go-oracle-terraform/helper"
	"github.com/hashicorp/go-oracle-terraform/opc"
	"github.com/stretchr/testify/assert"
)

// Test the SSL Certificate lifecycle the create, get, delete an SSL Certificate
// and validate the fields are set as expected.
func TestAccSSLCertificateLifeCycle(t *testing.T) {
	helper.Test(t, helper.TestCase{})

	certClient, err := getSSLCertificateClient()
	if err != nil {
		t.Fatal(err)
	}

	// CREATE

	createCertInput := &CreateSSLCertificateInput{
		Name:        "acc-test-ssl-cert1",
		Certificate: "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tDQpNSUlEcWpDQ0FwSUNDUUNISWJIMUtpUDhWakFOQmdrcWhraUc5dzBCQVFVRkFEQ0JsakVTTUJBR0ExVUVDQXdKDQpTMkZ5Ym1GMFlXdGhNUkl3RUFZRFZRUUtEQWxpWVc1bllXeHZjbVV4RmpBVUJnTlZCQWNNRFd0aGJIbGhibWxODQpZV2R1ZFcweEh6QWRCZ05WQkFNTUZpb3ViWGwxY213dWIzSmhZMnhsWTI5eWNDNWpiMjB4RGpBTUJnTlZCQXNNDQpCVXhDWVdGVE1TTXdJUVlKS29aSWh2Y05BUWtCRmhSaGNuTm9kV3RvYkdGQWIzSmhZMnhsTG1OdmJUQWVGdzB4DQpOakE1TURreE1qSXdNekZhRncweU5qQTVNRGN4TWpJd016RmFNSUdXTVJJd0VBWURWUVFJREFsTFlYSnVZWFJoDQphMkV4RWpBUUJnTlZCQW9NQ1dKaGJtZGhiRzl5WlRFV01CUUdBMVVFQnd3TmEyRnNlV0Z1YVUxaFoyNTFiVEVmDQpNQjBHQTFVRUF3d1dLaTV0ZVhWeWJDNXZjbUZqYkdWamIzSndMbU52YlRFT01Bd0dBMVVFQ3d3RlRFSmhZVk14DQpJekFoQmdrcWhraUc5dzBCQ1FFV0ZHRnljMmgxYTJoc1lVQnZjbUZqYkdVdVkyOXRNSUlCSWpBTkJna3Foa2lHDQo5dzBCQVFFRkFBT0NBUThBTUlJQkNnS0NBUUVBdXFIQlFQNXRrbVRqQ3ZtWnBjVHcwQmczZGNZU0Z5MVY3MkJODQo1b1p2TjBWVGpHS3RqeTZoM3NzUElXU3Jkd0VrVWdiY0hSdGdmU2Y5c0lKVEtTOW5qdDV2RjFuRlVjaGRITHUxDQpLQUttbVFwbmZvYzVUSllkc1IzcHlkM0g1S2ovRnZyUFF0T29oMFE4YmJjT2ZiN1lhWjQvS1BzTG9LakpJWEcyDQprclpkeU4xWVp1WkxQWVBobVQvcFg2NjJKeXRROVA3U1FPRjd6UENSUngvZ3EzY0N4YUc5bDZ6dW9CM2t5bG8yDQp5NzM3Z2xkK3lJZzJ3VDUvZkswRHFtQWVoblBLTHJjYWdhbUZBcVQ2aDJHYlc5N0RDdk8xTks5cEZSUERUSGNCDQp0UHZuZEJXMWVNdFVRZGEybzZQUjJsQWsxK3lYdDhFTG83N21rSi9XSkdTdjJ6UjBwd0lEQVFBQk1BMEdDU3FHDQpTSWIzRFFFQkJRVUFBNElCQVFBYXMvOU5DQWVUYUwrbUpwOFhMZE1qUDlxMmlOekd4WEFKTnBuaENtdlYxN1FSDQpuNGpHRUc4YllnQS9CazhZNThFeWhVdi9CV0VBZ05MNnZ2c1k1M1E5YTZCNkVxOEdvcXgzWktwd2VwV0xreWN5DQpWaE4vT2tOS3BmRGJZaXN3SjhIK0x5enhscGZqL0Vpb0NDeFpJNEJWZDJURUJpcjlpWTdlTUNYb2hETXJoVmtWDQpuaTVNbm8rbnlPdERLeFVKSUIvc3Bob3BsK1VjWGJUMy9aOUp1VmE0bDd0TUc2RWwxUmRSSHlhOWEyUXhtOS9pDQpyQkJIY3V2NUx4WnE1SFg3V0FyajljODhJUkcyN2FmMmc0SDJnSVBQeVJPRDZOa2RJMWw3TGNGZWl0SFZkVFB2DQpOUVhQRTRzdHFibEgvOVlpVldFdUhrRExsenZRMHAvT2R3ZUpVMVluDQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t",
		PrivateKey:  "LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQ0KTUlJRW93SUJBQUtDQVFFQXVxSEJRUDV0a21UakN2bVpwY1R3MEJnM2RjWVNGeTFWNzJCTjVvWnZOMFZUakdLdA0Kank2aDNzc1BJV1NyZHdFa1VnYmNIUnRnZlNmOXNJSlRLUzluanQ1dkYxbkZVY2hkSEx1MUtBS21tUXBuZm9jNQ0KVEpZZHNSM3B5ZDNINUtqL0Z2clBRdE9vaDBROGJiY09mYjdZYVo0L0tQc0xvS2pKSVhHMmtyWmR5TjFZWnVaTA0KUFlQaG1UL3BYNjYySnl0UTlQN1NRT0Y3elBDUlJ4L2dxM2NDeGFHOWw2enVvQjNreWxvMnk3MzdnbGQreUlnMg0Kd1Q1L2ZLMERxbUFlaG5QS0xyY2FnYW1GQXFUNmgyR2JXOTdEQ3ZPMU5LOXBGUlBEVEhjQnRQdm5kQlcxZU10VQ0KUWRhMm82UFIybEFrMSt5WHQ4RUxvNzdta0ovV0pHU3YyelIwcHdJREFRQUJBb0lCQUNFOUhjWU5pa1pBWVk5YQ0KMU5xSk1McGZGY0dML1R6VGZqS2IzRVBxUFhTQ2pGYThYRnpiMlVoc3NjMG91TUVCR3c3ZzJlTDFOVUlWRlVHUw0KZEcwcFhEQTl2VnRUU2FrL0hoWTMrQk9nSlR1c2RySTZNeUpJdWhFSld0SHhCZURibUZMbmFISm1iK1ZuYWJ2QQ0KbG53ZXVUeFdTcmxwdkxCb1h5bnRycTZDZkVHQm5KTFZ5a0JYc21IZDdhY2hTRmlRQ0s4RHNwMXlEQStrczVQKw0KNk0zQU8xQ0kwUllGalVMNkhCSCthZERZZUpYV0V6ZGo5SnFiVkdQYzBuZ1M5MmpVdUVMdEhJankxZnRUeGdBcQ0KbnQ3RThTbWlCUDFTU3lta1VLUjJKRkI5OUptZE9aaHFKSjI0VURMSVkrcnoyd1B4MFdFckQ2ek9SZC9SUDVlTw0KRnBxc2RJRUNnWUVBNENBdWR2UjNFM0NDRkZXdFR1bVY0dEV0bGo2bW1DSnN3TDdSMTVRZzBHS0RYZmlFUk9XVg0KY0VhRmg2REx6TW5wZzZDNjRSWEFMNjJLT2ZRME1lRTdWeUI4L2tRanpudHlDaDlSai9qTmdNZ0VRTGlMWjR0Qg0KeU83SmdGUEkzc1lYZlJ6dkFFdFBWbGw5Mm9qSzRvTDU4cUFtZUYxc0NWRFpYUC9hOVpVMnVNOENnWUVBMVN5Rg0KdGZpbE9QdEtObnhCU0g1L0hvQXdwbjFOZEkrbkF3em1hRVBocW8veVMvN1EzQk1ueTg0c0tCUHBCdTF5M3ZZcQ0KRVJoMUNNTzBTSGExMlcvS0R6bWZ0d3A1K3YrMERPdWxZbUxPNzNsdk9OZVNpVytESlNscW94azF1c2lmazB6ZA0KUlRvbU55blpxeGdtTS9MQ0diV1pKekZRTEd5MmhPR1A2TUVaVEtrQ2dZRUEwcC9McXNUQkpzYWpxQ0tBTlZtMQ0KSHl2L1VHUGVRYmlRUlc3T1cyNzhpM2taQlhXb0wrc2x6aGFvSkRhTGNCQU1ZRVByZTkzcDk2UjU4MDY0d210dA0KVGNyZFRFS1M5OWZ3NnV4VnhSeEhYQkFjVndwWEQ5N0IydWYwKzZGQmM0SHJ6d3NpM0Q3cDl6Y3cyKytUNHR5OQ0Kc2pLcEZKS1BGZzRoeDVFMm4zWXpyK2NDZ1lBdWNoZmo4UHZXc1hHVzgzV3AzTjNIZ0hpWkhiM3Rnb3NKOEJxWA0KWndyWkJhbnVBdVB3dnoreGVRZEg2Q2FpZXNQSGJtejE4cFUxUnFhV0R6OUowOEI3bHJ1RXZ3U2F1bkc1U3ZKcQ0Kd0VxRUJMcEY4VG9kTmEybVFDTGF6RmhYalBTdnZGU05pOERkemdGOTlMSUdLWU0rNU1Fc3QrTFcrd3k5WVFQZw0KMjRtdW1RS0JnSHlxV05Tbk1jV3p6bjNYQUJMclBEVko0b21UdWhZNGZndmNYWFkvM3YvT0M5bkI3bDNaaWdFQw0KR2htWGJZWUFYbVhYc2RNNjV2VG1IS0VkaVQ2RnZxWXZRemlnVVJkWmZpRENqeVFWNjZ0WnB6T2hRRENhMVdrNg0KSzVGSWZOMUdPZ1RmSTlJU3NRSWJoeVhyTjQxbithalhQbWZrYUt5bU4rRnBMSWgvRm1MYQ0KLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0",
		Trusted:     false,
	}

	_, err = certClient.CreateSSLCertificate(createCertInput)
	if err != nil {
		t.Fatal(err)
	}

	defer destroySSLCertificate(t, certClient, createCertInput.Name)

	// FETCH

	resp, err := certClient.GetSSLCertificate(createCertInput.Name)
	if err != nil {
		t.Fatal(err)
	}

	expected := &SSLCertificateInfo{
		Name:        createCertInput.Name,
		Certificate: createCertInput.Certificate,
		Trusted:     createCertInput.Trusted,
	}

	assert.Equal(t, expected.Name, resp.Name, "SSL Certification name should match")

}

func getSSLCertificateClient() (*SSLCertificateClient, error) {
	client, err := GetTestClient(&opc.Config{})
	if err != nil {
		return &SSLCertificateClient{}, err
	}
	return client.SSLCertificateClient(), nil
}

func destroySSLCertificate(t *testing.T, client *SSLCertificateClient, name string) {
	if _, err := client.DeleteSSLCertificate(name); err != nil {
		t.Fatal(err)
	}
}
